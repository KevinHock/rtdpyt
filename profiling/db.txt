############################################### Profiling 2016-08-10 13:53:08.742765 ###############################################

##### Profiling test_projects/flaskbb_lite_1/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_1/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.100027 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                               @profile
    12                                               def join(self, cfg_node):
    13     34596        19687      0.6     19.7          JOIN = set()
    14     64654        36026      0.6     36.0          for ingoing in cfg_node.ingoing:
    15     30058        30505      1.0     30.5              JOIN |= ingoing.old_constraint
    16     34596        13809      0.4     13.8          return JOIN

Total time: 1.30757 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               @profile
    19                                               def arrow(self, JOIN, _id):
    20     30657        17686      0.6      1.4          result = set()
    21    899053       393007      0.4     30.1          for cfg_node in JOIN:
    22                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    23    868396       424534      0.5     32.5              if _id is not cfg_node.left_hand_side:
    24    863528       459466      0.5     35.1                  result.add(cfg_node)
    25     30657        12879      0.4      1.0          return result

Total time: 2.6588 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                               @profile
    28                                               def fixpointmethod(self, cfg_node):
    29                                                   # Assignment: JOIN(v) arrow(id) join(v)
    30     34596        26784      0.8      1.0          if isinstance(cfg_node, AssignmentNode):
    31     30657       230261      7.5      8.7              JOIN = self.join(cfg_node)
    32     30657        14232      0.5      0.5              arrow_result = JOIN
    33     30657        20338      0.7      0.8              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    34     30657      2303651     75.1     86.6                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    35     30657        20023      0.7      0.8              arrow_result.add(cfg_node)
    36     30657        18586      0.6      0.7              cfg_node.new_constraint = arrow_result
    37                                                       
    38                                                   else:
    39                                                       # Default case join(v)
    40      3939        24928      6.3      0.9              cfg_node.new_constraint = self.join(cfg_node)

Wed Aug 10 13:53:09 2016    stats.prof

         1115433 function calls (1109189 primitive calls) in 0.435 seconds

   Ordered by: cumulative time
   List reduced from 751 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.004    0.000    0.435    0.435 {built-in method builtins.exec}
        1    0.000    0.000    0.435    0.435 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.357    0.357 ../pyt/fixed_point.py:41(analyse)
        7    0.000    0.000    0.356    0.051 ../pyt/fixed_point.py:28(fixpoint_runner)
      194    0.018    0.000    0.330    0.002 ../pyt/fixed_point.py:35(fixpoint_iteration)
    34596    0.041    0.000    0.312    0.000 ../pyt/reaching_definitions_taint.py:25(fixpointmethod)
    30657    0.177    0.000    0.239    0.000 ../pyt/reaching_definitions_taint.py:17(arrow)
   894220    0.064    0.000    0.064    0.000 {method 'add' of 'set' objects}
     44/9    0.000    0.000    0.041    0.005 <frozen importlib._bootstrap>:966(_find_and_load)
     44/9    0.000    0.000    0.041    0.005 <frozen importlib._bootstrap>:939(_find_and_load_unlocked)


##### Profiling test_projects/flaskbb_lite_2/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_2/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 7.80966 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                               @profile
    12                                               def join(self, cfg_node):
    13   1548602      1023302      0.7     13.1          JOIN = set()
    14   2994137      1996115      0.7     25.6          for ingoing in cfg_node.ingoing:
    15   1445535      4154997      2.9     53.2              JOIN |= ingoing.old_constraint
    16   1548602       635246      0.4      8.1          return JOIN

Total time: 374.495 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               @profile
    19                                               def arrow(self, JOIN, _id):
    20   1467058       974029      0.7      0.3          result = set()
    21 254661642    109700721      0.4     29.3          for cfg_node in JOIN:
    22                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    23 253194584    129272131      0.5     34.5              if _id is not cfg_node.left_hand_side:
    24 252813382    133927025      0.5     35.8                  result.add(cfg_node)
    25   1467058       621407      0.4      0.2          return result

Total time: 648.407 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                               @profile
    28                                               def fixpointmethod(self, cfg_node):
    29                                                   # Assignment: JOIN(v) arrow(id) join(v)
    30   1548602      1461537      0.9      0.2          if isinstance(cfg_node, AssignmentNode):
    31   1467058     14371167      9.8      2.2              JOIN = self.join(cfg_node)
    32   1467058       686717      0.5      0.1              arrow_result = JOIN
    33   1467058      1226815      0.8      0.2              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    34   1467058    628106513    428.1     96.9                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    35   1467058       986740      0.7      0.2              arrow_result.add(cfg_node)
    36   1467058      1027157      0.7      0.2              cfg_node.new_constraint = arrow_result
    37                                                       
    38                                                   else:
    39                                                       # Default case join(v)
    40     81544       540392      6.6      0.1              cfg_node.new_constraint = self.join(cfg_node)

Wed Aug 10 13:54:42 2016    stats.prof

         261667345 function calls (261646062 primitive calls) in 90.121 seconds

   Ordered by: cumulative time
   List reduced from 754 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.004    0.000   90.121   90.121 {built-in method builtins.exec}
        1    0.000    0.000   90.121   90.121 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000   89.886   89.886 ../pyt/fixed_point.py:41(analyse)
       14    0.007    0.000   89.886    6.420 ../pyt/fixed_point.py:28(fixpoint_runner)
     1102    1.791    0.002   84.617    0.077 ../pyt/fixed_point.py:35(fixpoint_iteration)
  1548602    2.404    0.000   82.826    0.000 ../pyt/reaching_definitions_taint.py:25(fixpointmethod)
  1467058   56.285    0.000   75.867    0.000 ../pyt/reaching_definitions_taint.py:17(arrow)
254280475   19.708    0.000   19.708    0.000 {method 'add' of 'set' objects}
  1548602    4.236    0.000    4.236    0.000 ../pyt/reaching_definitions_taint.py:11(join)
     1102    0.007    0.000    2.950    0.003 ../pyt/fixed_point.py:18(constraints_changed)


##### Profiling test_projects/flaskbb_lite_3/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_3/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 1.36268 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                               @profile
    12                                               def join(self, cfg_node):
    13    360436       245064      0.7     18.0          JOIN = set()
    14    696038       456391      0.7     33.5          for ingoing in cfg_node.ingoing:
    15    335602       512314      1.5     37.6              JOIN |= ingoing.old_constraint
    16    360436       148911      0.4     10.9          return JOIN

Total time: 39.8733 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               @profile
    19                                               def arrow(self, JOIN, _id):
    20    332441       232814      0.7      0.6          result = set()
    21  25459412     11771649      0.5     29.5          for cfg_node in JOIN:
    22                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    23  25126971     12591490      0.5     31.6              if _id is not cfg_node.left_hand_side:
    24  25049392     15128989      0.6     37.9                  result.add(cfg_node)
    25    332441       148387      0.4      0.4          return result

Total time: 69.2388 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                               @profile
    28                                               def fixpointmethod(self, cfg_node):
    29                                                   # Assignment: JOIN(v) arrow(id) join(v)
    30    360436       328782      0.9      0.5          if isinstance(cfg_node, AssignmentNode):
    31    332441      2875202      8.6      4.2              JOIN = self.join(cfg_node)
    32    332441       168029      0.5      0.2              arrow_result = JOIN
    33    332441       255674      0.8      0.4              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    34    332441     64963372    195.4     93.8                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    35    332441       229760      0.7      0.3              arrow_result.add(cfg_node)
    36    332441       208997      0.6      0.3              cfg_node.new_constraint = arrow_result
    37                                                       
    38                                                   else:
    39                                                       # Default case join(v)
    40     27995       208969      7.5      0.3              cfg_node.new_constraint = self.join(cfg_node)

Wed Aug 10 14:05:57 2016    stats.prof

         27061502 function calls (27053131 primitive calls) in 9.258 seconds

   Ordered by: cumulative time
   List reduced from 755 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.005    0.000    9.258    9.258 {built-in method builtins.exec}
        1    0.000    0.000    9.258    9.258 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    9.111    9.111 ../pyt/fixed_point.py:41(analyse)
        7    0.002    0.000    9.111    1.302 ../pyt/fixed_point.py:28(fixpoint_runner)
      412    0.261    0.001    8.550    0.021 ../pyt/fixed_point.py:35(fixpoint_iteration)
   360436    0.518    0.000    8.288    0.000 ../pyt/reaching_definitions_taint.py:25(fixpointmethod)
   332441    5.368    0.000    7.166    0.000 ../pyt/reaching_definitions_taint.py:17(arrow)
 25381868    1.825    0.000    1.825    0.000 {method 'add' of 'set' objects}
   360436    0.531    0.000    0.531    0.000 ../pyt/reaching_definitions_taint.py:11(join)
      405    0.307    0.001    0.307    0.001 ../pyt/fixed_point.py:22(swap_constraints)



############################################### Profiling 2016-08-11 08:42:50.417640 ###############################################

##### Profiling test_projects/flaskbb_lite_1/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_1/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.001953 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                               @profile
    12                                               def join(self, cfg_node):
    13       658          380      0.6     19.5          JOIN = set()
    14      1239          695      0.6     35.6          for ingoing in cfg_node.ingoing:
    15       581          599      1.0     30.7              JOIN |= ingoing.old_constraint
    16       658          279      0.4     14.3          return JOIN

Total time: 0.02661 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               @profile
    19                                               def arrow(self, JOIN, _id):
    20       582          314      0.5      1.2          result = set()
    21     19000         7620      0.4     28.6          for cfg_node in JOIN:
    22                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    23     18418         8705      0.5     32.7              if _id is not cfg_node.left_hand_side:
    24     18340         9730      0.5     36.6                  result.add(cfg_node)
    25       582          241      0.4      0.9          return result

Total time: 0.053916 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                               @profile
    28                                               def fixpointmethod(self, cfg_node):
    29                                                   # Assignment: JOIN(v) arrow(id) join(v)
    30       658          551      0.8      1.0          if isinstance(cfg_node, AssignmentNode):
    31       582         4296      7.4      8.0              JOIN = self.join(cfg_node)
    32       582          273      0.5      0.5              arrow_result = JOIN
    33       582          409      0.7      0.8              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    34       582        47140     81.0     87.4                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    35       582          357      0.6      0.7              arrow_result.add(cfg_node)
    36       582          362      0.6      0.7              cfg_node.new_constraint = arrow_result
    37                                                       
    38                                                   else:
    39                                                       # Default case join(v)
    40        76          528      6.9      1.0              cfg_node.new_constraint = self.join(cfg_node)

Thu Aug 11 08:42:50 2016    stats.prof

         84825 function calls (78581 primitive calls) in 0.086 seconds

   Ordered by: cumulative time
   List reduced from 747 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.004    0.000    0.086    0.086 {built-in method builtins.exec}
        1    0.000    0.000    0.086    0.086 ../pyt/pyt.py:1(<module>)
     44/9    0.000    0.000    0.037    0.004 <frozen importlib._bootstrap>:966(_find_and_load)
     44/9    0.000    0.000    0.037    0.004 <frozen importlib._bootstrap>:939(_find_and_load_unlocked)
     44/9    0.000    0.000    0.036    0.004 <frozen importlib._bootstrap>:659(_load_unlocked)
     38/9    0.000    0.000    0.036    0.004 <frozen importlib._bootstrap_external>:656(exec_module)
    54/10    0.000    0.000    0.034    0.003 <frozen importlib._bootstrap>:214(_call_with_frames_removed)
        7    0.000    0.000    0.026    0.004 ../pyt/cfg.py:236(__init__)
     63/7    0.002    0.000    0.026    0.004 ../pyt/cfg.py:354(stmt_star_handler)
  3524/31    0.003    0.000    0.026    0.001 /usr/local/lib/python3.5/ast.py:241(visit)


##### Profiling test_projects/flaskbb_lite_2/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_2/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.020054 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                               @profile
    12                                               def join(self, cfg_node):
    13      3656         2798      0.8     14.0          JOIN = set()
    14      7101         4968      0.7     24.8          for ingoing in cfg_node.ingoing:
    15      3445        10665      3.1     53.2              JOIN |= ingoing.old_constraint
    16      3656         1623      0.4      8.1          return JOIN

Total time: 1.29135 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               @profile
    19                                               def arrow(self, JOIN, _id):
    20      3478         2512      0.7      0.2          result = set()
    21    804342       377045      0.5     29.2          for cfg_node in JOIN:
    22                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    23    800864       424803      0.5     32.9              if _id is not cfg_node.left_hand_side:
    24    800044       485403      0.6     37.6                  result.add(cfg_node)
    25      3478         1590      0.5      0.1          return result

Total time: 2.10662 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                               @profile
    28                                               def fixpointmethod(self, cfg_node):
    29                                                   # Assignment: JOIN(v) arrow(id) join(v)
    30      3656         4501      1.2      0.2          if isinstance(cfg_node, AssignmentNode):
    31      3478        37120     10.7      1.8              JOIN = self.join(cfg_node)
    32      3478         1644      0.5      0.1              arrow_result = JOIN
    33      3478         3123      0.9      0.1              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    34      3478      2053746    590.5     97.5                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    35      3478         2435      0.7      0.1              arrow_result.add(cfg_node)
    36      3478         2762      0.8      0.1              cfg_node.new_constraint = arrow_result
    37                                                       
    38                                                   else:
    39                                                       # Default case join(v)
    40       178         1292      7.3      0.1              cfg_node.new_constraint = self.join(cfg_node)

Thu Aug 11 08:42:51 2016    stats.prof

         1046554 function calls (1025271 primitive calls) in 0.794 seconds

   Ordered by: cumulative time
   List reduced from 750 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.004    0.000    0.794    0.794 {built-in method builtins.exec}
        1    0.000    0.000    0.794    0.794 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.524    0.524 ../pyt/fixed_point.py:54(analyse)
       14    0.255    0.018    0.524    0.037 ../pyt/fixed_point.py:28(fixpoint_runner)
     3656    0.007    0.000    0.268    0.000 ../pyt/reaching_definitions_taint.py:25(fixpointmethod)
     3478    0.177    0.000    0.249    0.000 ../pyt/reaching_definitions_taint.py:17(arrow)
       14    0.000    0.000    0.131    0.009 ../pyt/cfg.py:236(__init__)
   166/14    0.003    0.000    0.130    0.009 ../pyt/cfg.py:354(stmt_star_handler)
 15012/55    0.014    0.000    0.130    0.002 /usr/local/lib/python3.5/ast.py:241(visit)
     47/3    0.000    0.000    0.122    0.041 ../pyt/cfg.py:381(visit_Module)


##### Profiling test_projects/flaskbb_lite_3/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_3/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.008095 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                               @profile
    12                                               def join(self, cfg_node):
    13      2128         1415      0.7     17.5          JOIN = set()
    14      4125         2746      0.7     33.9          for ingoing in cfg_node.ingoing:
    15      1997         3046      1.5     37.6              JOIN |= ingoing.old_constraint
    16      2128          888      0.4     11.0          return JOIN

Total time: 0.30566 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               @profile
    19                                               def arrow(self, JOIN, _id):
    20      2000         1280      0.6      0.4          result = set()
    21    206036        90598      0.4     29.6          for cfg_node in JOIN:
    22                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    23    204036       102302      0.5     33.5              if _id is not cfg_node.left_hand_side:
    24    203570       110652      0.5     36.2                  result.add(cfg_node)
    25      2000          828      0.4      0.3          return result

Total time: 0.542601 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                               @profile
    28                                               def fixpointmethod(self, cfg_node):
    29                                                   # Assignment: JOIN(v) arrow(id) join(v)
    30      2128         2286      1.1      0.4          if isinstance(cfg_node, AssignmentNode):
    31      2000        17395      8.7      3.2              JOIN = self.join(cfg_node)
    32      2000          995      0.5      0.2              arrow_result = JOIN
    33      2000         1656      0.8      0.3              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    34      2000       516530    258.3     95.2                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    35      2000         1343      0.7      0.2              arrow_result.add(cfg_node)
    36      2000         1452      0.7      0.3              cfg_node.new_constraint = arrow_result
    37                                                       
    38                                                   else:
    39                                                       # Default case join(v)
    40       128          944      7.4      0.2              cfg_node.new_constraint = self.join(cfg_node)

Thu Aug 11 08:42:55 2016    stats.prof

         311837 function calls (303466 primitive calls) in 0.277 seconds

   Ordered by: cumulative time
   List reduced from 751 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.004    0.000    0.278    0.278 {built-in method builtins.exec}
        1    0.000    0.000    0.278    0.278 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.165    0.165 ../pyt/fixed_point.py:54(analyse)
        7    0.094    0.013    0.165    0.024 ../pyt/fixed_point.py:28(fixpoint_runner)
     2128    0.004    0.000    0.071    0.000 ../pyt/reaching_definitions_taint.py:25(fixpointmethod)
     2000    0.046    0.000    0.063    0.000 ../pyt/reaching_definitions_taint.py:17(arrow)
        7    0.000    0.000    0.061    0.009 ../pyt/cfg.py:236(__init__)
    113/7    0.002    0.000    0.061    0.009 ../pyt/cfg.py:354(stmt_star_handler)
  5140/31    0.005    0.000    0.060    0.002 /usr/local/lib/python3.5/ast.py:241(visit)
     30/3    0.000    0.000    0.054    0.018 ../pyt/cfg.py:381(visit_Module)



############################################### Profiling 2016-08-11 15:16:20.611658 ###############################################

##### Profiling test_projects/flaskbb_lite_1/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_1/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.199352 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                               @profile
    12                                               def join(self, cfg_node):
    13     53882        41174      0.8     20.7          JOIN = set()
    14    100291        74362      0.7     37.3          for ingoing in cfg_node.ingoing:
    15     46409        61079      1.3     30.6              JOIN |= ingoing.old_constraint
    16     53882        22737      0.4     11.4          return JOIN

Total time: 2.83935 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               @profile
    19                                               def arrow(self, JOIN, _id):
    20     47426        34092      0.7      1.2          result = set()
    21   1966577       811851      0.4     28.6          for cfg_node in JOIN:
    22                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    23   1919151       901967      0.5     31.8              if _id is not cfg_node.left_hand_side:
    24   1910922      1072742      0.6     37.8                  result.add(cfg_node)
    25     47426        18697      0.4      0.7          return result

Total time: 5.77989 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                               @profile
    28                                               def fixpointmethod(self, cfg_node):
    29                                                   # Assignment: JOIN(v) arrow(id) join(v)
    30     53882        64655      1.2      1.1          if isinstance(cfg_node, AssignmentNode):
    31     47426       426010      9.0      7.4              JOIN = self.join(cfg_node)
    32     47426        22625      0.5      0.4              arrow_result = JOIN
    33     47426        38035      0.8      0.7              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    34     47426      5082041    107.2     87.9                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    35     47426        33748      0.7      0.6              arrow_result.add(cfg_node)
    36     47426        63677      1.3      1.1              cfg_node.new_constraint = arrow_result
    37                                                       
    38                                                   else:
    39                                                       # Default case join(v)
    40      6456        49096      7.6      0.8              cfg_node.new_constraint = self.join(cfg_node)

Thu Aug 11 15:16:25 2016    stats.prof

         2337803 function calls (2331559 primitive calls) in 4.504 seconds

   Ordered by: cumulative time
   List reduced from 734 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.005    0.000    4.505    4.505 {built-in method builtins.exec}
        1    0.000    0.000    4.505    4.505 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    4.419    4.419 ../pyt/fixed_point.py:57(analyse)
        7    3.615    0.516    4.419    0.631 ../pyt/fixed_point.py:32(fixpoint_runner)
    53882    0.123    0.000    0.796    0.000 ../pyt/reaching_definitions_taint.py:25(fixpointmethod)
    47426    0.430    0.000    0.580    0.000 ../pyt/reaching_definitions_taint.py:17(arrow)
  1958383    0.154    0.000    0.154    0.000 {method 'add' of 'set' objects}
    53882    0.079    0.000    0.079    0.000 ../pyt/reaching_definitions_taint.py:11(join)
     44/9    0.000    0.000    0.045    0.005 <frozen importlib._bootstrap>:966(_find_and_load)
     44/9    0.000    0.000    0.045    0.005 <frozen importlib._bootstrap>:939(_find_and_load_unlocked)


##### Profiling test_projects/flaskbb_lite_2/flaskbb/app.py #####
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Rest could not be run took over 30 minutes <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
############################################### Profiling 2016-08-12 10:44:38.439564 ###############################################

##### Profiling test_projects/flaskbb_lite_1/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_1/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.002 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                               @profile
    11                                               def join(self, cfg_node):
    12       652          385      0.6     19.2          JOIN = set()
    13      1262          758      0.6     37.9          for ingoing in cfg_node.ingoing:
    14       610          610      1.0     30.5              JOIN |= ingoing.old_constraint
    15       652          247      0.4     12.3          return JOIN

Total time: 0.027763 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                               @profile
    18                                               def arrow(self, JOIN, _id):
    19       540          318      0.6      1.1          result = set()
    20     18969         7851      0.4     28.3          for cfg_node in JOIN:
    21                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    22     18429         8910      0.5     32.1              if _id is not cfg_node.left_hand_side:
    23     18351        10458      0.6     37.7                  result.add(cfg_node)
    24       540          226      0.4      0.8          return result

Total time: 0.053986 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 26

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    26                                               @profile
    27                                               def fixpointmethod(self, cfg_node):
    28                                                   # Assignment: JOIN(v) arrow(id) join(v)
    29       652          537      0.8      1.0          if isinstance(cfg_node, AssignmentNode):
    30       540         4140      7.7      7.7              JOIN = self.join(cfg_node)
    31       540          270      0.5      0.5              arrow_result = JOIN
    32       540          413      0.8      0.8              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    33       540        47147     87.3     87.3                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    34       540          326      0.6      0.6              arrow_result.add(cfg_node)
    35       540          362      0.7      0.7              cfg_node.new_constraint = arrow_result
    36                                                       
    37                                                   else:
    38                                                       # Default case join(v)
    39       112          791      7.1      1.5              cfg_node.new_constraint = self.join(cfg_node)

Fri Aug 12 10:44:38 2016    stats.prof

         85065 function calls (78821 primitive calls) in 0.104 seconds

   Ordered by: cumulative time
   List reduced from 734 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.005    0.000    0.104    0.104 {built-in method builtins.exec}
        1    0.000    0.000    0.104    0.104 ../pyt/pyt.py:1(<module>)
     44/9    0.000    0.000    0.051    0.006 <frozen importlib._bootstrap>:966(_find_and_load)
     44/9    0.000    0.000    0.051    0.006 <frozen importlib._bootstrap>:939(_find_and_load_unlocked)
     44/9    0.000    0.000    0.050    0.006 <frozen importlib._bootstrap>:659(_load_unlocked)
     38/9    0.000    0.000    0.049    0.005 <frozen importlib._bootstrap_external>:656(exec_module)
     53/9    0.000    0.000    0.047    0.005 <frozen importlib._bootstrap>:214(_call_with_frames_removed)
        7    0.000    0.000    0.032    0.005 ../pyt/cfg.py:236(__init__)
     63/7    0.001    0.000    0.032    0.005 ../pyt/cfg.py:354(stmt_star_handler)
  3524/31    0.004    0.000    0.031    0.001 /usr/local/lib/python3.5/ast.py:241(visit)


##### Profiling test_projects/flaskbb_lite_2/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_2/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.018728 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                               @profile
    11                                               def join(self, cfg_node):
    12      3614         2501      0.7     13.4          JOIN = set()
    13      7096         4799      0.7     25.6          for ingoing in cfg_node.ingoing:
    14      3482         9925      2.9     53.0              JOIN |= ingoing.old_constraint
    15      3614         1503      0.4      8.0          return JOIN

Total time: 1.13656 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                               @profile
    18                                               def arrow(self, JOIN, _id):
    19      3373         2237      0.7      0.2          result = set()
    20    804260       331135      0.4     29.1          for cfg_node in JOIN:
    21                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    22    800887       385626      0.5     33.9              if _id is not cfg_node.left_hand_side:
    23    800067       416192      0.5     36.6                  result.add(cfg_node)
    24      3373         1370      0.4      0.1          return result

Total time: 2.04951 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 26

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    26                                               @profile
    27                                               def fixpointmethod(self, cfg_node):
    28                                                   # Assignment: JOIN(v) arrow(id) join(v)
    29      3614         3641      1.0      0.2          if isinstance(cfg_node, AssignmentNode):
    30      3373        35163     10.4      1.7              JOIN = self.join(cfg_node)
    31      3373         1505      0.4      0.1              arrow_result = JOIN
    32      3373         2933      0.9      0.1              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    33      3373      1999637    592.8     97.6                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    34      3373         2197      0.7      0.1              arrow_result.add(cfg_node)
    35      3373         2614      0.8      0.1              cfg_node.new_constraint = arrow_result
    36                                                       
    37                                                   else:
    38                                                       # Default case join(v)
    39       241         1820      7.6      0.1              cfg_node.new_constraint = self.join(cfg_node)

Fri Aug 12 10:44:39 2016    stats.prof

         1048103 function calls (1026820 primitive calls) in 0.538 seconds

   Ordered by: cumulative time
   List reduced from 751 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.004    0.000    0.539    0.539 {built-in method builtins.exec}
        1    0.000    0.000    0.539    0.539 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.313    0.313 ../pyt/fixed_point.py:53(analyse)
       14    0.032    0.002    0.313    0.022 ../pyt/fixed_point.py:32(fixpoint_runner)
     3614    0.007    0.000    0.279    0.000 ../pyt/reaching_definitions_taint.py:24(fixpointmethod)
     3373    0.185    0.000    0.259    0.000 ../pyt/reaching_definitions_taint.py:16(arrow)
       14    0.000    0.000    0.135    0.010 ../pyt/cfg.py:236(__init__)
   166/14    0.003    0.000    0.134    0.010 ../pyt/cfg.py:354(stmt_star_handler)
 15012/55    0.014    0.000    0.134    0.002 /usr/local/lib/python3.5/ast.py:241(visit)
     47/3    0.000    0.000    0.125    0.042 ../pyt/cfg.py:381(visit_Module)


##### Profiling test_projects/flaskbb_lite_3/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_3/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.009342 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                               @profile
    11                                               def join(self, cfg_node):
    12      2214         1576      0.7     16.9          JOIN = set()
    13      4370         3591      0.8     38.4          for ingoing in cfg_node.ingoing:
    14      2156         3332      1.5     35.7              JOIN |= ingoing.old_constraint
    15      2214          843      0.4      9.0          return JOIN

Total time: 0.308219 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                               @profile
    18                                               def arrow(self, JOIN, _id):
    19      2026         1299      0.6      0.4          result = set()
    20    216582        88340      0.4     28.7          for cfg_node in JOIN:
    21                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    22    214556       106752      0.5     34.6              if _id is not cfg_node.left_hand_side:
    23    214050       110978      0.5     36.0                  result.add(cfg_node)
    24      2026          850      0.4      0.3          return result

Total time: 0.552934 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 26

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    26                                               @profile
    27                                               def fixpointmethod(self, cfg_node):
    28                                                   # Assignment: JOIN(v) arrow(id) join(v)
    29      2214         2364      1.1      0.4          if isinstance(cfg_node, AssignmentNode):
    30      2026        18966      9.4      3.4              JOIN = self.join(cfg_node)
    31      2026          867      0.4      0.2              arrow_result = JOIN
    32      2026         1802      0.9      0.3              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    33      2026       524454    258.9     94.8                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    34      2026         1287      0.6      0.2              arrow_result.add(cfg_node)
    35      2026         1626      0.8      0.3              cfg_node.new_constraint = arrow_result
    36                                                       
    37                                                   else:
    38                                                       # Default case join(v)
    39       188         1568      8.3      0.3              cfg_node.new_constraint = self.join(cfg_node)

Fri Aug 12 10:44:42 2016    stats.prof

         323905 function calls (315534 primitive calls) in 0.194 seconds

   Ordered by: cumulative time
   List reduced from 752 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.004    0.000    0.194    0.194 {built-in method builtins.exec}
        1    0.000    0.000    0.194    0.194 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.083    0.083 ../pyt/fixed_point.py:53(analyse)
        7    0.011    0.002    0.083    0.012 ../pyt/fixed_point.py:32(fixpoint_runner)
     2214    0.004    0.000    0.069    0.000 ../pyt/reaching_definitions_taint.py:24(fixpointmethod)
     2026    0.045    0.000    0.062    0.000 ../pyt/reaching_definitions_taint.py:16(arrow)
        7    0.000    0.000    0.060    0.009 ../pyt/cfg.py:236(__init__)
    113/7    0.002    0.000    0.060    0.009 ../pyt/cfg.py:354(stmt_star_handler)
  5140/31    0.005    0.000    0.059    0.002 /usr/local/lib/python3.5/ast.py:241(visit)
     30/3    0.000    0.000    0.052    0.017 ../pyt/cfg.py:381(visit_Module)



############################################### Profiling 2016-08-18 10:23:59.655422 ###############################################

##### Profiling test_projects/flaskbb_lite_1/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_1/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.002118 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                               @profile
    11                                               def join(self, cfg_node):
    12       652          423      0.6     20.0          JOIN = set()
    13      1262          786      0.6     37.1          for ingoing in cfg_node.ingoing:
    14       610          633      1.0     29.9              JOIN |= ingoing.old_constraint
    15       652          276      0.4     13.0          return JOIN

Total time: 0.029002 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                               @profile
    18                                               def arrow(self, JOIN, _id):
    19       540          363      0.7      1.3          result = set()
    20     18969         8526      0.4     29.4          for cfg_node in JOIN:
    21                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    22     18429         9398      0.5     32.4              if _id is not cfg_node.left_hand_side:
    23     18351        10494      0.6     36.2                  result.add(cfg_node)
    24       540          221      0.4      0.8          return result

Total time: 0.05723 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 26

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    26                                               @profile
    27                                               def fixpointmethod(self, cfg_node):
    28                                                   # Assignment: JOIN(v) arrow(id) join(v)
    29       652          598      0.9      1.0          if isinstance(cfg_node, AssignmentNode):
    30       540         4381      8.1      7.7              JOIN = self.join(cfg_node)
    31       540          287      0.5      0.5              arrow_result = JOIN
    32       540          410      0.8      0.7              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    33       540        49912     92.4     87.2                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    34       540          392      0.7      0.7              arrow_result.add(cfg_node)
    35       540          418      0.8      0.7              cfg_node.new_constraint = arrow_result
    36                                           
    37                                                   else:
    38                                                       # Default case join(v)
    39       112          832      7.4      1.5              cfg_node.new_constraint = self.join(cfg_node)

Thu Aug 18 10:23:59 2016    stats.prof

         85308 function calls (79064 primitive calls) in 0.101 seconds

   Ordered by: cumulative time
   List reduced from 734 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.005    0.000    0.101    0.101 {built-in method builtins.exec}
        1    0.000    0.000    0.101    0.101 ../pyt/pyt.py:1(<module>)
     44/9    0.000    0.000    0.048    0.005 <frozen importlib._bootstrap>:966(_find_and_load)
     44/9    0.000    0.000    0.048    0.005 <frozen importlib._bootstrap>:939(_find_and_load_unlocked)
     44/9    0.000    0.000    0.047    0.005 <frozen importlib._bootstrap>:659(_load_unlocked)
     38/9    0.000    0.000    0.046    0.005 <frozen importlib._bootstrap_external>:656(exec_module)
     53/9    0.000    0.000    0.044    0.005 <frozen importlib._bootstrap>:214(_call_with_frames_removed)
        7    0.000    0.000    0.031    0.004 ../pyt/cfg.py:236(__init__)
     63/7    0.002    0.000    0.031    0.004 ../pyt/cfg.py:354(stmt_star_handler)
  3524/31    0.004    0.000    0.031    0.001 /usr/local/lib/python3.5/ast.py:241(visit)


##### Profiling test_projects/flaskbb_lite_2/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_2/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.019442 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                               @profile
    11                                               def join(self, cfg_node):
    12      3614         2857      0.8     14.7          JOIN = set()
    13      7096         5094      0.7     26.2          for ingoing in cfg_node.ingoing:
    14      3482         9924      2.9     51.0              JOIN |= ingoing.old_constraint
    15      3614         1567      0.4      8.1          return JOIN

Total time: 1.27334 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                               @profile
    18                                               def arrow(self, JOIN, _id):
    19      3373         2596      0.8      0.2          result = set()
    20    804260       370963      0.5     29.1          for cfg_node in JOIN:
    21                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    22    800887       424856      0.5     33.4              if _id is not cfg_node.left_hand_side:
    23    800067       473427      0.6     37.2                  result.add(cfg_node)
    24      3373         1496      0.4      0.1          return result

Total time: 2.09352 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 26

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    26                                               @profile
    27                                               def fixpointmethod(self, cfg_node):
    28                                                   # Assignment: JOIN(v) arrow(id) join(v)
    29      3614         3917      1.1      0.2          if isinstance(cfg_node, AssignmentNode):
    30      3373        35525     10.5      1.7              JOIN = self.join(cfg_node)
    31      3373         1690      0.5      0.1              arrow_result = JOIN
    32      3373         2883      0.9      0.1              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    33      3373      2042614    605.6     97.6                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    34      3373         2407      0.7      0.1              arrow_result.add(cfg_node)
    35      3373         2695      0.8      0.1              cfg_node.new_constraint = arrow_result
    36                                           
    37                                                   else:
    38                                                       # Default case join(v)
    39       241         1788      7.4      0.1              cfg_node.new_constraint = self.join(cfg_node)

Thu Aug 18 10:24:01 2016    stats.prof

         1049695 function calls (1028412 primitive calls) in 0.644 seconds

   Ordered by: cumulative time
   List reduced from 751 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.005    0.000    0.644    0.644 {built-in method builtins.exec}
        1    0.000    0.000    0.644    0.644 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.295    0.295 ../pyt/fixed_point.py:51(analyse)
       14    0.033    0.002    0.295    0.021 ../pyt/fixed_point.py:28(fixpoint_runner)
     3614    0.007    0.000    0.259    0.000 ../pyt/reaching_definitions_taint.py:24(fixpointmethod)
     3373    0.174    0.000    0.241    0.000 ../pyt/reaching_definitions_taint.py:16(arrow)
       14    0.000    0.000    0.235    0.017 ../pyt/cfg.py:236(__init__)
   166/14    0.006    0.000    0.235    0.017 ../pyt/cfg.py:354(stmt_star_handler)
 15012/55    0.024    0.000    0.234    0.004 /usr/local/lib/python3.5/ast.py:241(visit)
     47/3    0.000    0.000    0.224    0.075 ../pyt/cfg.py:381(visit_Module)


##### Profiling test_projects/flaskbb_lite_3/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_3/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.009086 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                               @profile
    11                                               def join(self, cfg_node):
    12      2214         1669      0.8     18.4          JOIN = set()
    13      4370         3233      0.7     35.6          for ingoing in cfg_node.ingoing:
    14      2156         3181      1.5     35.0              JOIN |= ingoing.old_constraint
    15      2214         1003      0.5     11.0          return JOIN

Total time: 0.356335 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                               @profile
    18                                               def arrow(self, JOIN, _id):
    19      2026         1499      0.7      0.4          result = set()
    20    216582       112749      0.5     31.6          for cfg_node in JOIN:
    21                                                       # if _id is not found in the LHS of cfg_node, the node will not be deleted
    22    214556       114815      0.5     32.2              if _id is not cfg_node.left_hand_side:
    23    214050       126361      0.6     35.5                  result.add(cfg_node)
    24      2026          911      0.4      0.3          return result

Total time: 0.598776 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 26

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    26                                               @profile
    27                                               def fixpointmethod(self, cfg_node):
    28                                                   # Assignment: JOIN(v) arrow(id) join(v)
    29      2214         2448      1.1      0.4          if isinstance(cfg_node, AssignmentNode):
    30      2026        18215      9.0      3.0              JOIN = self.join(cfg_node)
    31      2026         1123      0.6      0.2              arrow_result = JOIN
    32      2026         1793      0.9      0.3              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    33      2026       570531    281.6     95.3                  arrow_result = self.arrow(JOIN, cfg_node.left_hand_side)
    34      2026         1370      0.7      0.2              arrow_result.add(cfg_node)
    35      2026         1686      0.8      0.3              cfg_node.new_constraint = arrow_result
    36                                           
    37                                                   else:
    38                                                       # Default case join(v)
    39       188         1610      8.6      0.3              cfg_node.new_constraint = self.join(cfg_node)

Thu Aug 18 10:24:04 2016    stats.prof

         324937 function calls (316566 primitive calls) in 0.203 seconds

   Ordered by: cumulative time
   List reduced from 752 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48/1    0.004    0.000    0.203    0.203 {built-in method builtins.exec}
        1    0.000    0.000    0.203    0.203 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.083    0.083 ../pyt/fixed_point.py:51(analyse)
        7    0.012    0.002    0.083    0.012 ../pyt/fixed_point.py:28(fixpoint_runner)
     2214    0.004    0.000    0.069    0.000 ../pyt/reaching_definitions_taint.py:24(fixpointmethod)
     2026    0.044    0.000    0.061    0.000 ../pyt/reaching_definitions_taint.py:16(arrow)
        7    0.000    0.000    0.061    0.009 ../pyt/cfg.py:236(__init__)
    113/7    0.002    0.000    0.061    0.009 ../pyt/cfg.py:354(stmt_star_handler)
  5140/31    0.005    0.000    0.061    0.002 /usr/local/lib/python3.5/ast.py:241(visit)
     30/3    0.000    0.000    0.054    0.018 ../pyt/cfg.py:381(visit_Module)



############################################### Profiling 2016-08-30 10:25:44.817073 ###############################################

##### Profiling test_projects/flaskbb_lite_1/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_1/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.069463 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def fixpoint_runner(self):
    21                                                   """Work list algorithm that runs the fixpoint algorithm."""
    22         7            8      1.1      0.0          q = self.cfg.nodes
    23                                           
    24       659          361      0.5      0.5          while q != []:
    25       652          438      0.7      0.6              x_i = self.lattice.table[q[0]] # to get old constraint has to be here before fixpointmethod
    26                                           
    27                                                       # y = F_i(x_1, ..., x_n):
    28       652        65521    100.5     94.3              self.analysis.fixpointmethod(q[0])
    29                                                       #y = q[0].new_constraint
    30       652          492      0.8      0.7              y = self.lattice.table[q[0]]
    31                                                       #x_i = q[0].old_constraint
    32                                           
    33                                           
    34       652          356      0.5      0.5              if y != x_i:
    35                                                           # for (v in dep(v_i)) q.append(v):
    36       612          977      1.6      1.4                  for node in self.analysis.dep(q[0]):
    37       285          278      1.0      0.4                      q.append(node)
    38                                                           #q[0].old_constraint = q[0].new_constraint # x_1 = y
    39       327          248      0.8      0.4                  self.lattice.table[q[0]] = y
    40       652          784      1.2      1.1              q = q[1:] # q = q.tail()

Total time: 0 s
File: ../pyt/fixed_point.py
Function: fixpoint_iteration at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                               @profile
    43                                               def fixpoint_iteration(self):
    44                                                   """A fixpoint iteration."""
    45                                                   for node in self.cfg.nodes:
    46                                                       self.analysis.fixpointmethod(node)

Total time: 0.00122 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def join(self, cfg_node):
    18                                                   #if isinstance(cfg_node, AssignmentNode):
    19                                                    #   return self.lattice.join([cfg_node], self.get_assignment_nodes(cfg_node.ingoing))
    20                                                   #else:
    21       652         1220      1.9    100.0          return self.lattice.constraint_join(cfg_node.ingoing)

Total time: 0.048607 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 23

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                               @profile
    24                                               def arrow(self, JOIN, _id):
    25       540          231      0.4      0.5          r = JOIN
    26     11621        42935      3.7     88.3          for node in self.lattice.get_elements(JOIN):
    27     11081         5158      0.5     10.6              if node.left_hand_side == _id.left_hand_side:
    28       156          106      0.7      0.2                  r = r ^ self.lattice.d[node]
    29       540          177      0.3      0.4          return r

Total time: 0.061903 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 31

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    31                                               @profile
    32                                               def fixpointmethod(self, cfg_node):
    33       652         3097      4.8      5.0          JOIN = self.join(cfg_node)
    34       652          500      0.8      0.8          if isinstance(cfg_node, AssignmentNode):
    35       540          202      0.4      0.3              arrow_result = JOIN
    36                                           
    37       540          302      0.6      0.5              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    38       540        56973    105.5     92.0                  arrow_result = self.arrow(JOIN, cfg_node)
    39                                           
    40       540          416      0.8      0.7              arrow_result = arrow_result | self.lattice.d[cfg_node]
    41       540          339      0.6      0.5              self.lattice.table[cfg_node] = arrow_result
    42                                                   else:
    43       112           74      0.7      0.1              self.lattice.table[cfg_node] = JOIN

Tue Aug 30 10:25:45 2016    stats.prof

         80451 function calls (74211 primitive calls) in 0.087 seconds

   Ordered by: cumulative time
   List reduced from 757 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     49/1    0.004    0.000    0.087    0.087 {built-in method builtins.exec}
        1    0.000    0.000    0.087    0.087 ../pyt/pyt.py:1(<module>)
    45/10    0.000    0.000    0.039    0.004 <frozen importlib._bootstrap>:966(_find_and_load)
    45/10    0.000    0.000    0.039    0.004 <frozen importlib._bootstrap>:939(_find_and_load_unlocked)
    45/10    0.000    0.000    0.038    0.004 <frozen importlib._bootstrap>:659(_load_unlocked)
    39/10    0.000    0.000    0.037    0.004 <frozen importlib._bootstrap_external>:656(exec_module)
    56/12    0.000    0.000    0.035    0.003 <frozen importlib._bootstrap>:214(_call_with_frames_removed)
        7    0.000    0.000    0.025    0.004 ../pyt/cfg.py:236(__init__)
     63/7    0.001    0.000    0.025    0.004 ../pyt/cfg.py:354(stmt_star_handler)
  3524/31    0.003    0.000    0.025    0.001 /usr/lib64/python3.5/ast.py:241(visit)


##### Profiling test_projects/flaskbb_lite_2/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_2/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 2.26101 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def fixpoint_runner(self):
    21                                                   """Work list algorithm that runs the fixpoint algorithm."""
    22        14           16      1.1      0.0          q = self.cfg.nodes
    23                                           
    24      3628         2255      0.6      0.1          while q != []:
    25      3614         2727      0.8      0.1              x_i = self.lattice.table[q[0]] # to get old constraint has to be here before fixpointmethod
    26                                           
    27                                                       # y = F_i(x_1, ..., x_n):
    28      3614      2223851    615.3     98.4              self.analysis.fixpointmethod(q[0])
    29                                                       #y = q[0].new_constraint
    30      3614         2856      0.8      0.1              y = self.lattice.table[q[0]]
    31                                                       #x_i = q[0].old_constraint
    32                                           
    33                                           
    34      3614         2047      0.6      0.1              if y != x_i:
    35                                                           # for (v in dep(v_i)) q.append(v):
    36      3499         6451      1.8      0.3                  for node in self.analysis.dep(q[0]):
    37      1697         2633      1.6      0.1                      q.append(node)
    38                                                           #q[0].old_constraint = q[0].new_constraint # x_1 = y
    39      1802         1485      0.8      0.1                  self.lattice.table[q[0]] = y
    40      3614        16685      4.6      0.7              q = q[1:] # q = q.tail()

Total time: 0 s
File: ../pyt/fixed_point.py
Function: fixpoint_iteration at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                               @profile
    43                                               def fixpoint_iteration(self):
    44                                                   """A fixpoint iteration."""
    45                                                   for node in self.cfg.nodes:
    46                                                       self.analysis.fixpointmethod(node)

Total time: 0.008056 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def join(self, cfg_node):
    18                                                   #if isinstance(cfg_node, AssignmentNode):
    19                                                    #   return self.lattice.join([cfg_node], self.get_assignment_nodes(cfg_node.ingoing))
    20                                                   #else:
    21      3614         8056      2.2    100.0          return self.lattice.constraint_join(cfg_node.ingoing)

Total time: 2.0357 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 23

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                               @profile
    24                                               def arrow(self, JOIN, _id):
    25      3373         1361      0.4      0.1          r = JOIN
    26    219544      1930711      8.8     94.8          for node in self.lattice.get_elements(JOIN):
    27    216171       101084      0.5      5.0              if node.left_hand_side == _id.left_hand_side:
    28      1640         1381      0.8      0.1                  r = r ^ self.lattice.d[node]
    29      3373         1160      0.3      0.1          return r

Total time: 2.20298 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 31

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    31                                               @profile
    32                                               def fixpointmethod(self, cfg_node):
    33      3614        18910      5.2      0.9          JOIN = self.join(cfg_node)
    34      3614         3010      0.8      0.1          if isinstance(cfg_node, AssignmentNode):
    35      3373         1313      0.4      0.1              arrow_result = JOIN
    36                                           
    37      3373         2628      0.8      0.1              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    38      3373      2171401    643.8     98.6                  arrow_result = self.arrow(JOIN, cfg_node)
    39                                           
    40      3373         3157      0.9      0.1              arrow_result = arrow_result | self.lattice.d[cfg_node]
    41      3373         2403      0.7      0.1              self.lattice.table[cfg_node] = arrow_result
    42                                                   else:
    43       241          155      0.6      0.0              self.lattice.table[cfg_node] = JOIN

Tue Aug 30 10:25:46 2016    stats.prof

         479707 function calls (458428 primitive calls) in 0.602 seconds

   Ordered by: cumulative time
   List reduced from 760 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     49/1    0.003    0.000    0.602    0.602 {built-in method builtins.exec}
        1    0.000    0.000    0.602    0.602 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.398    0.398 ../pyt/fixed_point.py:47(analyse)
       14    0.021    0.002    0.398    0.028 ../pyt/fixed_point.py:19(fixpoint_runner)
     3614    0.006    0.000    0.375    0.000 ../pyt/reaching_definitions_taint.py:29(fixpointmethod)
     3373    0.024    0.000    0.363    0.000 ../pyt/reaching_definitions_taint.py:22(arrow)
     3373    0.318    0.000    0.339    0.000 ../pyt/lattice.py:51(get_elements)
       14    0.000    0.000    0.119    0.008 ../pyt/cfg.py:236(__init__)
   166/14    0.003    0.000    0.119    0.008 ../pyt/cfg.py:354(stmt_star_handler)
 15012/55    0.013    0.000    0.118    0.002 /usr/lib64/python3.5/ast.py:241(visit)


##### Profiling test_projects/flaskbb_lite_3/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_3/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 1.02124 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def fixpoint_runner(self):
    21                                                   """Work list algorithm that runs the fixpoint algorithm."""
    22         7            8      1.1      0.0          q = self.cfg.nodes
    23                                           
    24      2221         1400      0.6      0.1          while q != []:
    25      2214         1678      0.8      0.2              x_i = self.lattice.table[q[0]] # to get old constraint has to be here before fixpointmethod
    26                                           
    27                                                       # y = F_i(x_1, ..., x_n):
    28      2214      1001477    452.3     98.1              self.analysis.fixpointmethod(q[0])
    29                                                       #y = q[0].new_constraint
    30      2214         1776      0.8      0.2              y = self.lattice.table[q[0]]
    31                                                       #x_i = q[0].old_constraint
    32                                           
    33                                           
    34      2214         1243      0.6      0.1              if y != x_i:
    35                                                           # for (v in dep(v_i)) q.append(v):
    36      2226         4046      1.8      0.4                  for node in self.analysis.dep(q[0]):
    37      1086         1414      1.3      0.1                      q.append(node)
    38                                                           #q[0].old_constraint = q[0].new_constraint # x_1 = y
    39      1140          970      0.9      0.1                  self.lattice.table[q[0]] = y
    40      2214         7228      3.3      0.7              q = q[1:] # q = q.tail()

Total time: 0 s
File: ../pyt/fixed_point.py
Function: fixpoint_iteration at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                               @profile
    43                                               def fixpoint_iteration(self):
    44                                                   """A fixpoint iteration."""
    45                                                   for node in self.cfg.nodes:
    46                                                       self.analysis.fixpointmethod(node)

Total time: 0.004865 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def join(self, cfg_node):
    18                                                   #if isinstance(cfg_node, AssignmentNode):
    19                                                    #   return self.lattice.join([cfg_node], self.get_assignment_nodes(cfg_node.ingoing))
    20                                                   #else:
    21      2214         4865      2.2    100.0          return self.lattice.constraint_join(cfg_node.ingoing)

Total time: 0.896483 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 23

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                               @profile
    24                                               def arrow(self, JOIN, _id):
    25      2026          875      0.4      0.1          r = JOIN
    26    109372       841661      7.7     93.9          for node in self.lattice.get_elements(JOIN):
    27    107346        52415      0.5      5.8              if node.left_hand_side == _id.left_hand_side:
    28       950          806      0.8      0.1                  r = r ^ self.lattice.d[node]
    29      2026          726      0.4      0.1          return r

Total time: 0.988904 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 31

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    31                                               @profile
    32                                               def fixpointmethod(self, cfg_node):
    33      2214        11317      5.1      1.1          JOIN = self.join(cfg_node)
    34      2214         1853      0.8      0.2          if isinstance(cfg_node, AssignmentNode):
    35      2026          802      0.4      0.1              arrow_result = JOIN
    36                                           
    37      2026         1472      0.7      0.1              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    38      2026       970265    478.9     98.1                  arrow_result = self.arrow(JOIN, cfg_node)
    39                                           
    40      2026         1764      0.9      0.2              arrow_result = arrow_result | self.lattice.d[cfg_node]
    41      2026         1325      0.7      0.1              self.lattice.table[cfg_node] = arrow_result
    42                                                   else:
    43       188          106      0.6      0.0              self.lattice.table[cfg_node] = JOIN

Tue Aug 30 10:25:49 2016    stats.prof

         226558 function calls (218191 primitive calls) in 0.274 seconds

   Ordered by: cumulative time
   List reduced from 761 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     49/1    0.003    0.000    0.274    0.274 {built-in method builtins.exec}
        1    0.000    0.000    0.274    0.274 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.169    0.169 ../pyt/fixed_point.py:47(analyse)
        7    0.010    0.001    0.169    0.024 ../pyt/fixed_point.py:19(fixpoint_runner)
     2214    0.004    0.000    0.158    0.000 ../pyt/reaching_definitions_taint.py:29(fixpointmethod)
     2026    0.012    0.000    0.152    0.000 ../pyt/reaching_definitions_taint.py:22(arrow)
     2026    0.129    0.000    0.140    0.000 ../pyt/lattice.py:51(get_elements)
        7    0.000    0.000    0.053    0.008 ../pyt/cfg.py:236(__init__)
    113/7    0.001    0.000    0.053    0.008 ../pyt/cfg.py:354(stmt_star_handler)
  5140/31    0.005    0.000    0.053    0.002 /usr/lib64/python3.5/ast.py:241(visit)



############################################### Profiling 2016-09-01 13:59:09.479503 ###############################################

##### Profiling test_projects/flaskbb_lite_1/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_1/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.072167 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def fixpoint_runner(self):
    21                                                   """Work list algorithm that runs the fixpoint algorithm."""
    22         7            7      1.0      0.0          q = self.cfg.nodes
    23                                           
    24       659          369      0.6      0.5          while q != []:
    25       652          539      0.8      0.7              x_i = self.lattice.table[q[0]] # to get old constraint has to be here before fixpointmethod
    26                                           
    27                                                       # y = F_i(x_1, ..., x_n):
    28       652        67639    103.7     93.7              self.analysis.fixpointmethod(q[0])
    29                                                       #y = q[0].new_constraint
    30       652          480      0.7      0.7              y = self.lattice.table[q[0]]
    31                                                       #x_i = q[0].old_constraint
    32                                           
    33                                           
    34       652          762      1.2      1.1              if y != x_i:
    35                                                           # for (v in dep(v_i)) q.append(v):
    36       612         1027      1.7      1.4                  for node in self.analysis.dep(q[0]):
    37       285          251      0.9      0.3                      q.append(node)
    38                                                           #q[0].old_constraint = q[0].new_constraint # x_1 = y
    39       327          263      0.8      0.4                  self.lattice.table[q[0]] = y
    40       652          830      1.3      1.2              q = q[1:] # q = q.tail()

Total time: 0 s
File: ../pyt/fixed_point.py
Function: fixpoint_iteration at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                               @profile
    43                                               def fixpoint_iteration(self):
    44                                                   """A fixpoint iteration."""
    45                                                   for node in self.cfg.nodes:
    46                                                       self.analysis.fixpointmethod(node)

Total time: 0.001285 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def join(self, cfg_node):
    18                                                   #if isinstance(cfg_node, AssignmentNode):
    19                                                    #   return self.lattice.join([cfg_node], self.get_assignment_nodes(cfg_node.ingoing))
    20                                                   #else:
    21       652         1285      2.0    100.0          return self.lattice.constraint_join(cfg_node.ingoing)

Total time: 0.049356 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 23

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                               @profile
    24                                               def arrow(self, JOIN, _id):
    25       540          217      0.4      0.4          r = JOIN
    26     11621        43488      3.7     88.1          for node in self.lattice.get_elements(JOIN):
    27     11081         5349      0.5     10.8              if node.left_hand_side == _id.left_hand_side:
    28       156          112      0.7      0.2                  r = r ^ self.lattice.d[node]
    29       540          190      0.4      0.4          return r

Total time: 0.0639 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 31

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    31                                               @profile
    32                                               def fixpointmethod(self, cfg_node):
    33       652         3179      4.9      5.0          JOIN = self.join(cfg_node)
    34       652          529      0.8      0.8          if isinstance(cfg_node, AssignmentNode):
    35       540          211      0.4      0.3              arrow_result = JOIN
    36                                           
    37       540          352      0.7      0.6              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    38       540        58747    108.8     91.9                  arrow_result = self.arrow(JOIN, cfg_node)
    39                                           
    40       540          447      0.8      0.7              arrow_result = arrow_result | self.lattice.d[cfg_node]
    41       540          367      0.7      0.6              self.lattice.table[cfg_node] = arrow_result
    42                                                   else:
    43       112           68      0.6      0.1              self.lattice.table[cfg_node] = JOIN

Thu Sep  1 13:59:09 2016    stats.prof

         81594 function calls (75354 primitive calls) in 0.117 seconds

   Ordered by: cumulative time
   List reduced from 761 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     49/1    0.005    0.000    0.117    0.117 {built-in method builtins.exec}
        1    0.000    0.000    0.117    0.117 ../pyt/pyt.py:1(<module>)
    45/10    0.000    0.000    0.057    0.006 <frozen importlib._bootstrap>:966(_find_and_load)
    45/10    0.000    0.000    0.057    0.006 <frozen importlib._bootstrap>:939(_find_and_load_unlocked)
    45/10    0.000    0.000    0.055    0.006 <frozen importlib._bootstrap>:659(_load_unlocked)
    39/10    0.000    0.000    0.055    0.005 <frozen importlib._bootstrap_external>:656(exec_module)
    57/13    0.000    0.000    0.052    0.004 <frozen importlib._bootstrap>:214(_call_with_frames_removed)
        7    0.000    0.000    0.032    0.005 ../pyt/cfg.py:236(__init__)
     63/7    0.001    0.000    0.031    0.004 ../pyt/cfg.py:354(stmt_star_handler)
  3524/31    0.004    0.000    0.031    0.001 /usr/lib64/python3.5/ast.py:241(visit)


##### Profiling test_projects/flaskbb_lite_2/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_2/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 2.22713 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def fixpoint_runner(self):
    21                                                   """Work list algorithm that runs the fixpoint algorithm."""
    22        14           14      1.0      0.0          q = self.cfg.nodes
    23                                           
    24      3628         2285      0.6      0.1          while q != []:
    25      3614         3431      0.9      0.2              x_i = self.lattice.table[q[0]] # to get old constraint has to be here before fixpointmethod
    26                                           
    27                                                       # y = F_i(x_1, ..., x_n):
    28      3614      2186964    605.1     98.2              self.analysis.fixpointmethod(q[0])
    29                                                       #y = q[0].new_constraint
    30      3614         2946      0.8      0.1              y = self.lattice.table[q[0]]
    31                                                       #x_i = q[0].old_constraint
    32                                           
    33                                           
    34      3614         4554      1.3      0.2              if y != x_i:
    35                                                           # for (v in dep(v_i)) q.append(v):
    36      3499         6172      1.8      0.3                  for node in self.analysis.dep(q[0]):
    37      1697         2499      1.5      0.1                      q.append(node)
    38                                                           #q[0].old_constraint = q[0].new_constraint # x_1 = y
    39      1802         1525      0.8      0.1                  self.lattice.table[q[0]] = y
    40      3614        16735      4.6      0.8              q = q[1:] # q = q.tail()

Total time: 0 s
File: ../pyt/fixed_point.py
Function: fixpoint_iteration at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                               @profile
    43                                               def fixpoint_iteration(self):
    44                                                   """A fixpoint iteration."""
    45                                                   for node in self.cfg.nodes:
    46                                                       self.analysis.fixpointmethod(node)

Total time: 0.008001 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def join(self, cfg_node):
    18                                                   #if isinstance(cfg_node, AssignmentNode):
    19                                                    #   return self.lattice.join([cfg_node], self.get_assignment_nodes(cfg_node.ingoing))
    20                                                   #else:
    21      3614         8001      2.2    100.0          return self.lattice.constraint_join(cfg_node.ingoing)

Total time: 1.99811 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 23

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                               @profile
    24                                               def arrow(self, JOIN, _id):
    25      3373         1350      0.4      0.1          r = JOIN
    26    219544      1894684      8.6     94.8          for node in self.lattice.get_elements(JOIN):
    27    216171        99447      0.5      5.0              if node.left_hand_side == _id.left_hand_side:
    28      1640         1497      0.9      0.1                  r = r ^ self.lattice.d[node]
    29      3373         1134      0.3      0.1          return r

Total time: 2.16572 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 31

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    31                                               @profile
    32                                               def fixpointmethod(self, cfg_node):
    33      3614        18819      5.2      0.9          JOIN = self.join(cfg_node)
    34      3614         2983      0.8      0.1          if isinstance(cfg_node, AssignmentNode):
    35      3373         1270      0.4      0.1              arrow_result = JOIN
    36                                           
    37      3373         2529      0.7      0.1              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    38      3373      2134597    632.8     98.6                  arrow_result = self.arrow(JOIN, cfg_node)
    39                                           
    40      3373         3140      0.9      0.1              arrow_result = arrow_result | self.lattice.d[cfg_node]
    41      3373         2227      0.7      0.1              self.lattice.table[cfg_node] = arrow_result
    42                                                   else:
    43       241          158      0.7      0.0              self.lattice.table[cfg_node] = JOIN

Thu Sep  1 13:59:10 2016    stats.prof

         485366 function calls (464087 primitive calls) in 0.654 seconds

   Ordered by: cumulative time
   List reduced from 764 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     49/1    0.004    0.000    0.654    0.654 {built-in method builtins.exec}
        1    0.000    0.000    0.654    0.654 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.410    0.410 ../pyt/fixed_point.py:47(analyse)
       14    0.023    0.002    0.409    0.029 ../pyt/fixed_point.py:19(fixpoint_runner)
     3614    0.006    0.000    0.384    0.000 ../pyt/reaching_definitions_taint.py:29(fixpointmethod)
     3373    0.026    0.000    0.373    0.000 ../pyt/reaching_definitions_taint.py:22(arrow)
     3373    0.326    0.000    0.347    0.000 ../pyt/lattice.py:53(get_elements)
       14    0.000    0.000    0.145    0.010 ../pyt/cfg.py:236(__init__)
   166/14    0.004    0.000    0.145    0.010 ../pyt/cfg.py:354(stmt_star_handler)
 15012/55    0.016    0.000    0.144    0.003 /usr/lib64/python3.5/ast.py:241(visit)


##### Profiling test_projects/flaskbb_lite_3/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_3/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.976384 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def fixpoint_runner(self):
    21                                                   """Work list algorithm that runs the fixpoint algorithm."""
    22         7            8      1.1      0.0          q = self.cfg.nodes
    23                                           
    24      2221         1375      0.6      0.1          while q != []:
    25      2214         1990      0.9      0.2              x_i = self.lattice.table[q[0]] # to get old constraint has to be here before fixpointmethod
    26                                           
    27                                                       # y = F_i(x_1, ..., x_n):
    28      2214       955243    431.5     97.8              self.analysis.fixpointmethod(q[0])
    29                                                       #y = q[0].new_constraint
    30      2214         1802      0.8      0.2              y = self.lattice.table[q[0]]
    31                                                       #x_i = q[0].old_constraint
    32                                           
    33                                           
    34      2214         2712      1.2      0.3              if y != x_i:
    35                                                           # for (v in dep(v_i)) q.append(v):
    36      2226         3941      1.8      0.4                  for node in self.analysis.dep(q[0]):
    37      1086          999      0.9      0.1                      q.append(node)
    38                                                           #q[0].old_constraint = q[0].new_constraint # x_1 = y
    39      1140          935      0.8      0.1                  self.lattice.table[q[0]] = y
    40      2214         7379      3.3      0.8              q = q[1:] # q = q.tail()

Total time: 0 s
File: ../pyt/fixed_point.py
Function: fixpoint_iteration at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                               @profile
    43                                               def fixpoint_iteration(self):
    44                                                   """A fixpoint iteration."""
    45                                                   for node in self.cfg.nodes:
    46                                                       self.analysis.fixpointmethod(node)

Total time: 0.00497 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def join(self, cfg_node):
    18                                                   #if isinstance(cfg_node, AssignmentNode):
    19                                                    #   return self.lattice.join([cfg_node], self.get_assignment_nodes(cfg_node.ingoing))
    20                                                   #else:
    21      2214         4970      2.2    100.0          return self.lattice.constraint_join(cfg_node.ingoing)

Total time: 0.844564 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 23

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                               @profile
    24                                               def arrow(self, JOIN, _id):
    25      2026          860      0.4      0.1          r = JOIN
    26    109372       790705      7.2     93.6          for node in self.lattice.get_elements(JOIN):
    27    107346        51460      0.5      6.1              if node.left_hand_side == _id.left_hand_side:
    28       950          837      0.9      0.1                  r = r ^ self.lattice.d[node]
    29      2026          702      0.3      0.1          return r

Total time: 0.941991 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 31

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    31                                               @profile
    32                                               def fixpointmethod(self, cfg_node):
    33      2214        11688      5.3      1.2          JOIN = self.join(cfg_node)
    34      2214         1853      0.8      0.2          if isinstance(cfg_node, AssignmentNode):
    35      2026          783      0.4      0.1              arrow_result = JOIN
    36                                           
    37      2026         1545      0.8      0.2              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    38      2026       922854    455.5     98.0                  arrow_result = self.arrow(JOIN, cfg_node)
    39                                           
    40      2026         1768      0.9      0.2              arrow_result = arrow_result | self.lattice.d[cfg_node]
    41      2026         1376      0.7      0.1              self.lattice.table[cfg_node] = arrow_result
    42                                                   else:
    43       188          124      0.7      0.0              self.lattice.table[cfg_node] = JOIN

Thu Sep  1 13:59:13 2016    stats.prof

         229906 function calls (221539 primitive calls) in 0.328 seconds

   Ordered by: cumulative time
   List reduced from 766 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     49/1    0.004    0.000    0.328    0.328 {built-in method builtins.exec}
        1    0.000    0.000    0.328    0.328 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.180    0.180 ../pyt/fixed_point.py:47(analyse)
        7    0.012    0.002    0.180    0.026 ../pyt/fixed_point.py:19(fixpoint_runner)
     2214    0.004    0.000    0.167    0.000 ../pyt/reaching_definitions_taint.py:29(fixpointmethod)
     2026    0.013    0.000    0.160    0.000 ../pyt/reaching_definitions_taint.py:22(arrow)
     2026    0.137    0.000    0.147    0.000 ../pyt/lattice.py:53(get_elements)
        7    0.000    0.000    0.081    0.012 ../pyt/cfg.py:236(__init__)
    113/7    0.002    0.000    0.081    0.012 ../pyt/cfg.py:354(stmt_star_handler)
  5140/31    0.007    0.000    0.081    0.003 /usr/lib64/python3.5/ast.py:241(visit)



############################################### Profiling 2016-09-06 12:07:06.419946 ###############################################

##### Profiling test_projects/flaskbb_lite_1/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_1/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.071465 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def fixpoint_runner(self):
    21                                                   """Work list algorithm that runs the fixpoint algorithm."""
    22         7            7      1.0      0.0          q = self.cfg.nodes
    23                                           
    24       659          402      0.6      0.6          while q != []:
    25       652          415      0.6      0.6              x_i = constraint_table[q[0]] # to get old constraint has to be here before fixpointmethod
    26                                           
    27                                                       # y = F_i(x_1, ..., x_n):
    28       652        66983    102.7     93.7              self.analysis.fixpointmethod(q[0])
    29                                                       #y = q[0].new_constraint
    30       652          460      0.7      0.6              y = constraint_table[q[0]]
    31                                                       #x_i = q[0].old_constraint
    32                                           
    33                                           
    34       652          808      1.2      1.1              if not self.analysis.equal(y, x_i):
    35                                                           # for (v in dep(v_i)) q.append(v):
    36       612         1012      1.7      1.4                  for node in self.analysis.dep(q[0]):
    37       285          256      0.9      0.4                      q.append(node)
    38                                                           #q[0].old_constraint = q[0].new_constraint # x_1 = y
    39       327          244      0.7      0.3                  constraint_table[q[0]] = y
    40       652          878      1.3      1.2              q = q[1:] # q = q.tail()

Total time: 0.001261 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                               @profile
    13                                               def join(self, cfg_node):
    14                                                   """Joins all constraints of the ingoing nodes and returns them.
    15                                                   This represents the JOIN auxiliary definition from Schwartzbach."""
    16       652         1261      1.9    100.0          return constraint_join(cfg_node.ingoing)

Total time: 0.049712 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               @profile
    19                                               def arrow(self, JOIN, _id):
    20                                                   """Removes all assignments from JOIN that has _id on the left hand side.
    21                                                   This represents the arrow id definition from Schwartzbach."""
    22       540          237      0.4      0.5          r = JOIN
    23     11621        43736      3.8     88.0          for node in self.lattice.get_elements(JOIN):
    24     11081         5422      0.5     10.9              if node.left_hand_side == _id.left_hand_side:
    25       156          138      0.9      0.3                  r = r ^ self.lattice.el2bv[node]
    26       540          179      0.3      0.4          return r

Total time: 0.063448 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 28

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    28                                               @profile
    29                                               def fixpointmethod(self, cfg_node):
    30       652         3192      4.9      5.0          JOIN = self.join(cfg_node)
    31                                                   # Assignment check
    32       652          492      0.8      0.8          if isinstance(cfg_node, AssignmentNode):
    33       540          210      0.4      0.3              arrow_result = JOIN
    34                                           
    35                                                       # Reassignment check:
    36       540          337      0.6      0.5              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    37       540        58367    108.1     92.0                  arrow_result = self.arrow(JOIN, cfg_node)
    38                                           
    39       540          457      0.8      0.7              arrow_result = arrow_result | self.lattice.el2bv[cfg_node]
    40       540          326      0.6      0.5              constraint_table[cfg_node] = arrow_result
    41                                                   # Default case:
    42                                                   else:
    43       112           67      0.6      0.1              constraint_table[cfg_node] = JOIN

Tue Sep  6 12:07:06 2016    stats.prof

         82573 function calls (76322 primitive calls) in 0.088 seconds

   Ordered by: cumulative time
   List reduced from 747 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     50/1    0.004    0.000    0.089    0.089 {built-in method builtins.exec}
        1    0.000    0.000    0.089    0.089 ../pyt/pyt.py:1(<module>)
     46/9    0.000    0.000    0.040    0.004 <frozen importlib._bootstrap>:966(_find_and_load)
     46/9    0.000    0.000    0.039    0.004 <frozen importlib._bootstrap>:939(_find_and_load_unlocked)
     46/9    0.000    0.000    0.038    0.004 <frozen importlib._bootstrap>:659(_load_unlocked)
     40/9    0.000    0.000    0.038    0.004 <frozen importlib._bootstrap_external>:656(exec_module)
     55/9    0.000    0.000    0.037    0.004 <frozen importlib._bootstrap>:214(_call_with_frames_removed)
        7    0.000    0.000    0.025    0.004 ../pyt/cfg.py:236(__init__)
     63/7    0.001    0.000    0.025    0.004 ../pyt/cfg.py:354(stmt_star_handler)
  3524/31    0.003    0.000    0.025    0.001 /usr/lib64/python3.5/ast.py:241(visit)


##### Profiling test_projects/flaskbb_lite_2/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_2/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 2.28445 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def fixpoint_runner(self):
    21                                                   """Work list algorithm that runs the fixpoint algorithm."""
    22        14           10      0.7      0.0          q = self.cfg.nodes
    23                                           
    24      3628         2237      0.6      0.1          while q != []:
    25      3614         2500      0.7      0.1              x_i = constraint_table[q[0]] # to get old constraint has to be here before fixpointmethod
    26                                           
    27                                                       # y = F_i(x_1, ..., x_n):
    28      3614      2246194    621.5     98.3              self.analysis.fixpointmethod(q[0])
    29                                                       #y = q[0].new_constraint
    30      3614         2506      0.7      0.1              y = constraint_table[q[0]]
    31                                                       #x_i = q[0].old_constraint
    32                                           
    33                                           
    34      3614         4813      1.3      0.2              if not self.analysis.equal(y, x_i):
    35                                                           # for (v in dep(v_i)) q.append(v):
    36      3499         6194      1.8      0.3                  for node in self.analysis.dep(q[0]):
    37      1697         1787      1.1      0.1                      q.append(node)
    38                                                           #q[0].old_constraint = q[0].new_constraint # x_1 = y
    39      1802         1290      0.7      0.1                  constraint_table[q[0]] = y
    40      3614        16915      4.7      0.7              q = q[1:] # q = q.tail()

Total time: 0.007693 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                               @profile
    13                                               def join(self, cfg_node):
    14                                                   """Joins all constraints of the ingoing nodes and returns them.
    15                                                   This represents the JOIN auxiliary definition from Schwartzbach."""
    16      3614         7693      2.1    100.0          return constraint_join(cfg_node.ingoing)

Total time: 2.04542 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               @profile
    19                                               def arrow(self, JOIN, _id):
    20                                                   """Removes all assignments from JOIN that has _id on the left hand side.
    21                                                   This represents the arrow id definition from Schwartzbach."""
    22      3373         1339      0.4      0.1          r = JOIN
    23    219544      1936173      8.8     94.7          for node in self.lattice.get_elements(JOIN):
    24    216171       105314      0.5      5.1              if node.left_hand_side == _id.left_hand_side:
    25      1640         1377      0.8      0.1                  r = r ^ self.lattice.el2bv[node]
    26      3373         1219      0.4      0.1          return r

Total time: 2.22468 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 28

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    28                                               @profile
    29                                               def fixpointmethod(self, cfg_node):
    30      3614        18448      5.1      0.8          JOIN = self.join(cfg_node)
    31                                                   # Assignment check
    32      3614         2868      0.8      0.1          if isinstance(cfg_node, AssignmentNode):
    33      3373         1334      0.4      0.1              arrow_result = JOIN
    34                                           
    35                                                       # Reassignment check:
    36      3373         2671      0.8      0.1              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    37      3373      2193781    650.4     98.6                  arrow_result = self.arrow(JOIN, cfg_node)
    38                                           
    39      3373         3096      0.9      0.1              arrow_result = arrow_result | self.lattice.el2bv[cfg_node]
    40      3373         2352      0.7      0.1              constraint_table[cfg_node] = arrow_result
    41                                                   # Default case:
    42                                                   else:
    43       241          126      0.5      0.0              constraint_table[cfg_node] = JOIN

Tue Sep  6 12:07:07 2016    stats.prof

         490803 function calls (469512 primitive calls) in 0.627 seconds

   Ordered by: cumulative time
   List reduced from 764 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     50/1    0.003    0.000    0.628    0.628 {built-in method builtins.exec}
        1    0.000    0.000    0.628    0.628 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.423    0.423 ../pyt/fixed_point.py:42(analyse)
       14    0.022    0.002    0.421    0.030 ../pyt/fixed_point.py:19(fixpoint_runner)
     3614    0.006    0.000    0.396    0.000 ../pyt/reaching_definitions_taint.py:26(fixpointmethod)
     3373    0.025    0.000    0.384    0.000 ../pyt/reaching_definitions_taint.py:17(arrow)
     3373    0.337    0.000    0.359    0.000 ../pyt/lattice.py:12(get_elements)
       14    0.000    0.000    0.120    0.009 ../pyt/cfg.py:236(__init__)
   166/14    0.003    0.000    0.119    0.009 ../pyt/cfg.py:354(stmt_star_handler)
 15012/55    0.013    0.000    0.119    0.002 /usr/lib64/python3.5/ast.py:241(visit)


##### Profiling test_projects/flaskbb_lite_3/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_3/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.959401 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def fixpoint_runner(self):
    21                                                   """Work list algorithm that runs the fixpoint algorithm."""
    22         7            6      0.9      0.0          q = self.cfg.nodes
    23                                           
    24      2221         1446      0.7      0.2          while q != []:
    25      2214         1523      0.7      0.2              x_i = constraint_table[q[0]] # to get old constraint has to be here before fixpointmethod
    26                                           
    27                                                       # y = F_i(x_1, ..., x_n):
    28      2214       938271    423.8     97.8              self.analysis.fixpointmethod(q[0])
    29                                                       #y = q[0].new_constraint
    30      2214         1628      0.7      0.2              y = constraint_table[q[0]]
    31                                                       #x_i = q[0].old_constraint
    32                                           
    33                                           
    34      2214         2819      1.3      0.3              if not self.analysis.equal(y, x_i):
    35                                                           # for (v in dep(v_i)) q.append(v):
    36      2226         4031      1.8      0.4                  for node in self.analysis.dep(q[0]):
    37      1086         1524      1.4      0.2                      q.append(node)
    38                                                           #q[0].old_constraint = q[0].new_constraint # x_1 = y
    39      1140          835      0.7      0.1                  constraint_table[q[0]] = y
    40      2214         7318      3.3      0.8              q = q[1:] # q = q.tail()

Total time: 0.004699 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                               @profile
    13                                               def join(self, cfg_node):
    14                                                   """Joins all constraints of the ingoing nodes and returns them.
    15                                                   This represents the JOIN auxiliary definition from Schwartzbach."""
    16      2214         4699      2.1    100.0          return constraint_join(cfg_node.ingoing)

Total time: 0.835913 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               @profile
    19                                               def arrow(self, JOIN, _id):
    20                                                   """Removes all assignments from JOIN that has _id on the left hand side.
    21                                                   This represents the arrow id definition from Schwartzbach."""
    22      2026          861      0.4      0.1          r = JOIN
    23    109372       782369      7.2     93.6          for node in self.lattice.get_elements(JOIN):
    24    107346        51234      0.5      6.1              if node.left_hand_side == _id.left_hand_side:
    25       950          766      0.8      0.1                  r = r ^ self.lattice.el2bv[node]
    26      2026          683      0.3      0.1          return r

Total time: 0.925831 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 28

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    28                                               @profile
    29                                               def fixpointmethod(self, cfg_node):
    30      2214        11338      5.1      1.2          JOIN = self.join(cfg_node)
    31                                                   # Assignment check
    32      2214         1848      0.8      0.2          if isinstance(cfg_node, AssignmentNode):
    33      2026          781      0.4      0.1              arrow_result = JOIN
    34                                           
    35                                                       # Reassignment check:
    36      2026         1515      0.7      0.2              if not cfg_node.left_hand_side in cfg_node.right_hand_side_variables:
    37      2026       907091    447.7     98.0                  arrow_result = self.arrow(JOIN, cfg_node)
    38                                           
    39      2026         1786      0.9      0.2              arrow_result = arrow_result | self.lattice.el2bv[cfg_node]
    40      2026         1364      0.7      0.1              constraint_table[cfg_node] = arrow_result
    41                                                   # Default case:
    42                                                   else:
    43       188          108      0.6      0.0              constraint_table[cfg_node] = JOIN

Tue Sep  6 12:07:10 2016    stats.prof

         233220 function calls (224841 primitive calls) in 0.313 seconds

   Ordered by: cumulative time
   List reduced from 765 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     50/1    0.003    0.000    0.313    0.313 {built-in method builtins.exec}
        1    0.000    0.000    0.313    0.313 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.180    0.180 ../pyt/fixed_point.py:42(analyse)
        7    0.010    0.001    0.179    0.026 ../pyt/fixed_point.py:19(fixpoint_runner)
     2214    0.004    0.000    0.167    0.000 ../pyt/reaching_definitions_taint.py:26(fixpointmethod)
     2026    0.014    0.000    0.161    0.000 ../pyt/reaching_definitions_taint.py:17(arrow)
     2026    0.137    0.000    0.147    0.000 ../pyt/lattice.py:12(get_elements)
        7    0.000    0.000    0.080    0.011 ../pyt/cfg.py:236(__init__)
    113/7    0.002    0.000    0.079    0.011 ../pyt/cfg.py:354(stmt_star_handler)
  5140/31    0.007    0.000    0.079    0.003 /usr/lib64/python3.5/ast.py:241(visit)



############################################### Profiling 2016-09-13 17:20:42.332121 ###############################################

##### Profiling test_projects/flaskbb_lite_1/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_1/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_1/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.070036 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def fixpoint_runner(self):
    18                                                   """Work list algorithm that runs the fixpoint algorithm."""
    19         7            7      1.0      0.0          q = self.cfg.nodes
    20                                           
    21       659          387      0.6      0.6          while q != []:
    22       652          383      0.6      0.5              x_i = constraint_table[q[0]]
    23                                           
    24                                                       # y = F_i(x_1, ..., x_n):
    25       652        65752    100.8     93.9              self.analysis.fixpointmethod(q[0])
    26                                                       # y = q[0].new_constraint
    27       652          441      0.7      0.6              y = constraint_table[q[0]]
    28                                                       # x_i = q[0].old_constraint
    29                                           
    30       652          794      1.2      1.1              if not self.analysis.equal(y, x_i):
    31                                                           # for (v in dep(v_i)) q.append(v):
    32       612          989      1.6      1.4                  for node in self.analysis.dep(q[0]):
    33       285          240      0.8      0.3                      q.append(node)
    34                                                           # q[0].old_constraint = q[0].new_constraint # x_1 = y
    35       327          218      0.7      0.3                  constraint_table[q[0]] = y
    36       652          825      1.3      1.2              q = q[1:]  # q = q.tail()

Total time: 0.001186 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 13

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    13                                               @profile
    14                                               def join(self, cfg_node):
    15                                                   """Joins all constraints of the ingoing nodes and returns them.
    16                                                   This represents the JOIN auxiliary definition from Schwartzbach."""
    17       652         1186      1.8    100.0          return constraint_join(cfg_node.ingoing)

Total time: 0.048351 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def arrow(self, JOIN, _id):
    21                                                   """Removes all assignments from JOIN that has _id on the left hand side.
    22                                                   This represents the arrow id definition from Schwartzbach."""
    23       540          251      0.5      0.5          r = JOIN
    24     11621        42696      3.7     88.3          for node in self.lattice.get_elements(JOIN):
    25     11081         5115      0.5     10.6              if node.left_hand_side == _id.left_hand_side:
    26       156          113      0.7      0.2                  r = r ^ self.lattice.el2bv[node]
    27       540          176      0.3      0.4          return r

Total time: 0.062018 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 29

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    29                                               @profile
    30                                               def fixpointmethod(self, cfg_node):
    31       652         3119      4.8      5.0          JOIN = self.join(cfg_node)
    32                                                   # Assignment check
    33       652          499      0.8      0.8          if isinstance(cfg_node, AssignmentNode):
    34       540          206      0.4      0.3              arrow_result = JOIN
    35                                           
    36                                                       # Reassignment check:
    37       540          251      0.5      0.4              if cfg_node.left_hand_side not in\
    38       540          269      0.5      0.4                 cfg_node.right_hand_side_variables:
    39       540        56836    105.3     91.6                  arrow_result = self.arrow(JOIN, cfg_node)
    40                                           
    41       540          442      0.8      0.7              arrow_result = arrow_result | self.lattice.el2bv[cfg_node]
    42       540          328      0.6      0.5              constraint_table[cfg_node] = arrow_result
    43                                                   # Default case:
    44                                                   else:
    45       112           68      0.6      0.1              constraint_table[cfg_node] = JOIN

Tue Sep 13 17:20:42 2016    stats.prof

         83009 function calls (76764 primitive calls) in 0.099 seconds

   Ordered by: cumulative time
   List reduced from 751 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     51/1    0.004    0.000    0.099    0.099 {built-in method builtins.exec}
        1    0.000    0.000    0.099    0.099 ../pyt/pyt.py:1(<module>)
    47/11    0.000    0.000    0.042    0.004 <frozen importlib._bootstrap>:966(_find_and_load)
    47/11    0.000    0.000    0.041    0.004 <frozen importlib._bootstrap>:939(_find_and_load_unlocked)
    47/11    0.000    0.000    0.040    0.004 <frozen importlib._bootstrap>:659(_load_unlocked)
    41/11    0.000    0.000    0.040    0.004 <frozen importlib._bootstrap_external>:656(exec_module)
    56/11    0.000    0.000    0.038    0.003 <frozen importlib._bootstrap>:214(_call_with_frames_removed)
        7    0.000    0.000    0.032    0.005 ../pyt/cfg.py:233(__init__)
     63/7    0.001    0.000    0.032    0.005 ../pyt/cfg.py:377(stmt_star_handler)
  3522/31    0.004    0.000    0.032    0.001 /usr/lib64/python3.5/ast.py:241(visit)


##### Profiling test_projects/flaskbb_lite_2/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_2/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_2/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 2.31025 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def fixpoint_runner(self):
    18                                                   """Work list algorithm that runs the fixpoint algorithm."""
    19        14           12      0.9      0.0          q = self.cfg.nodes
    20                                           
    21      3628         2384      0.7      0.1          while q != []:
    22      3614         2619      0.7      0.1              x_i = constraint_table[q[0]]
    23                                           
    24                                                       # y = F_i(x_1, ..., x_n):
    25      3614      2270496    628.3     98.3              self.analysis.fixpointmethod(q[0])
    26                                                       # y = q[0].new_constraint
    27      3614         2513      0.7      0.1              y = constraint_table[q[0]]
    28                                                       # x_i = q[0].old_constraint
    29                                           
    30      3614         5159      1.4      0.2              if not self.analysis.equal(y, x_i):
    31                                                           # for (v in dep(v_i)) q.append(v):
    32      3499         6344      1.8      0.3                  for node in self.analysis.dep(q[0]):
    33      1697         1823      1.1      0.1                      q.append(node)
    34                                                           # q[0].old_constraint = q[0].new_constraint # x_1 = y
    35      1802         1324      0.7      0.1                  constraint_table[q[0]] = y
    36      3614        17576      4.9      0.8              q = q[1:]  # q = q.tail()

Total time: 0.008139 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 13

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    13                                               @profile
    14                                               def join(self, cfg_node):
    15                                                   """Joins all constraints of the ingoing nodes and returns them.
    16                                                   This represents the JOIN auxiliary definition from Schwartzbach."""
    17      3614         8139      2.3    100.0          return constraint_join(cfg_node.ingoing)

Total time: 2.06312 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def arrow(self, JOIN, _id):
    21                                                   """Removes all assignments from JOIN that has _id on the left hand side.
    22                                                   This represents the arrow id definition from Schwartzbach."""
    23      3373         1320      0.4      0.1          r = JOIN
    24    219544      1954633      8.9     94.7          for node in self.lattice.get_elements(JOIN):
    25    216171       104412      0.5      5.1              if node.left_hand_side == _id.left_hand_side:
    26      1640         1575      1.0      0.1                  r = r ^ self.lattice.el2bv[node]
    27      3373         1176      0.3      0.1          return r

Total time: 2.24694 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 29

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    29                                               @profile
    30                                               def fixpointmethod(self, cfg_node):
    31      3614        19579      5.4      0.9          JOIN = self.join(cfg_node)
    32                                                   # Assignment check
    33      3614         3085      0.9      0.1          if isinstance(cfg_node, AssignmentNode):
    34      3373         1367      0.4      0.1              arrow_result = JOIN
    35                                           
    36                                                       # Reassignment check:
    37      3373         1761      0.5      0.1              if cfg_node.left_hand_side not in\
    38      3373         2653      0.8      0.1                 cfg_node.right_hand_side_variables:
    39      3373      2212710    656.0     98.5                  arrow_result = self.arrow(JOIN, cfg_node)
    40                                           
    41      3373         3396      1.0      0.2              arrow_result = arrow_result | self.lattice.el2bv[cfg_node]
    42      3373         2249      0.7      0.1              constraint_table[cfg_node] = arrow_result
    43                                                   # Default case:
    44                                                   else:
    45       241          140      0.6      0.0              constraint_table[cfg_node] = JOIN

Tue Sep 13 17:20:43 2016    stats.prof

         491218 function calls (469940 primitive calls) in 0.677 seconds

   Ordered by: cumulative time
   List reduced from 768 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     51/1    0.003    0.000    0.677    0.677 {built-in method builtins.exec}
        1    0.000    0.000    0.677    0.677 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.461    0.461 ../pyt/fixed_point.py:38(analyse)
       14    0.022    0.002    0.459    0.033 ../pyt/fixed_point.py:16(fixpoint_runner)
     3614    0.006    0.000    0.434    0.000 ../pyt/reaching_definitions_taint.py:27(fixpointmethod)
     3373    0.025    0.000    0.422    0.000 ../pyt/reaching_definitions_taint.py:18(arrow)
     3373    0.376    0.000    0.397    0.000 ../pyt/lattice.py:14(get_elements)
       14    0.000    0.000    0.126    0.009 ../pyt/cfg.py:233(__init__)
   166/14    0.003    0.000    0.125    0.009 ../pyt/cfg.py:377(stmt_star_handler)
 15003/55    0.014    0.000    0.125    0.002 /usr/lib64/python3.5/ast.py:241(visit)


##### Profiling test_projects/flaskbb_lite_3/flaskbb/app.py #####

1 vulnerability found:
Vulnerability 1:
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > User input at line 249, trigger word "get(": 
	param = request.args.get('param', 'not set')
Reassigned in: 
	File: test_projects/flaskbb_lite_3/flaskbb/app.py
	 > Line 253: ret_make_response = resp
File: test_projects/flaskbb_lite_3/flaskbb/app.py
 > reaches line 252, trigger word "replace(": 
	resp = make_response(html.replace('{{ param }}', param))

Wrote profile results to pyt.py.lprof
Timer unit: 1e-06 s

Total time: 0.980438 s
File: ../pyt/fixed_point.py
Function: fixpoint_runner at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def fixpoint_runner(self):
    18                                                   """Work list algorithm that runs the fixpoint algorithm."""
    19         7            7      1.0      0.0          q = self.cfg.nodes
    20                                           
    21      2221         1487      0.7      0.2          while q != []:
    22      2214         1630      0.7      0.2              x_i = constraint_table[q[0]]
    23                                           
    24                                                       # y = F_i(x_1, ..., x_n):
    25      2214       958176    432.8     97.7              self.analysis.fixpointmethod(q[0])
    26                                                       # y = q[0].new_constraint
    27      2214         1670      0.8      0.2              y = constraint_table[q[0]]
    28                                                       # x_i = q[0].old_constraint
    29                                           
    30      2214         3024      1.4      0.3              if not self.analysis.equal(y, x_i):
    31                                                           # for (v in dep(v_i)) q.append(v):
    32      2226         4353      2.0      0.4                  for node in self.analysis.dep(q[0]):
    33      1086         1609      1.5      0.2                      q.append(node)
    34                                                           # q[0].old_constraint = q[0].new_constraint # x_1 = y
    35      1140          948      0.8      0.1                  constraint_table[q[0]] = y
    36      2214         7534      3.4      0.8              q = q[1:]  # q = q.tail()

Total time: 0.004956 s
File: ../pyt/reaching_definitions_taint.py
Function: join at line 13

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    13                                               @profile
    14                                               def join(self, cfg_node):
    15                                                   """Joins all constraints of the ingoing nodes and returns them.
    16                                                   This represents the JOIN auxiliary definition from Schwartzbach."""
    17      2214         4956      2.2    100.0          return constraint_join(cfg_node.ingoing)

Total time: 0.852994 s
File: ../pyt/reaching_definitions_taint.py
Function: arrow at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                               @profile
    20                                               def arrow(self, JOIN, _id):
    21                                                   """Removes all assignments from JOIN that has _id on the left hand side.
    22                                                   This represents the arrow id definition from Schwartzbach."""
    23      2026          869      0.4      0.1          r = JOIN
    24    109372       798781      7.3     93.6          for node in self.lattice.get_elements(JOIN):
    25    107346        51788      0.5      6.1              if node.left_hand_side == _id.left_hand_side:
    26       950          840      0.9      0.1                  r = r ^ self.lattice.el2bv[node]
    27      2026          716      0.4      0.1          return r

Total time: 0.944209 s
File: ../pyt/reaching_definitions_taint.py
Function: fixpointmethod at line 29

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    29                                               @profile
    30                                               def fixpointmethod(self, cfg_node):
    31      2214        11840      5.3      1.3          JOIN = self.join(cfg_node)
    32                                                   # Assignment check
    33      2214         1898      0.9      0.2          if isinstance(cfg_node, AssignmentNode):
    34      2026          824      0.4      0.1              arrow_result = JOIN
    35                                           
    36                                                       # Reassignment check:
    37      2026         1047      0.5      0.1              if cfg_node.left_hand_side not in\
    38      2026         1271      0.6      0.1                 cfg_node.right_hand_side_variables:
    39      2026       923940    456.0     97.9                  arrow_result = self.arrow(JOIN, cfg_node)
    40                                           
    41      2026         1889      0.9      0.2              arrow_result = arrow_result | self.lattice.el2bv[cfg_node]
    42      2026         1390      0.7      0.1              constraint_table[cfg_node] = arrow_result
    43                                                   # Default case:
    44                                                   else:
    45       188          110      0.6      0.0              constraint_table[cfg_node] = JOIN

Tue Sep 13 17:20:46 2016    stats.prof

         233642 function calls (225273 primitive calls) in 0.287 seconds

   Ordered by: cumulative time
   List reduced from 769 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     51/1    0.003    0.000    0.287    0.287 {built-in method builtins.exec}
        1    0.000    0.000    0.287    0.287 ../pyt/pyt.py:1(<module>)
        1    0.000    0.000    0.175    0.175 ../pyt/fixed_point.py:38(analyse)
        7    0.010    0.001    0.174    0.025 ../pyt/fixed_point.py:16(fixpoint_runner)
     2214    0.004    0.000    0.162    0.000 ../pyt/reaching_definitions_taint.py:27(fixpointmethod)
     2026    0.013    0.000    0.156    0.000 ../pyt/reaching_definitions_taint.py:18(arrow)
     2026    0.132    0.000    0.143    0.000 ../pyt/lattice.py:14(get_elements)
        7    0.000    0.000    0.059    0.008 ../pyt/cfg.py:233(__init__)
    113/7    0.002    0.000    0.059    0.008 ../pyt/cfg.py:377(stmt_star_handler)
  5134/31    0.005    0.000    0.059    0.002 /usr/lib64/python3.5/ast.py:241(visit)



